
main.elf:     format de fichier elf32-avr

Sections :
Idx Nom           Taille    VMA       LMA       Fich off  Algn
  0 .text         000000f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000f2  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000168  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e4  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000cf  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000126  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004c  00000000  00000000  0000067e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000006ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Déassemblage de la section .text :

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_init>:
{
	
	unsigned int ubrr;	

	/*Set baud rate */
	ubrr=fosc/16/baud-1;
  6c:	97 fd       	sbrc	r25, 7
  6e:	0f 96       	adiw	r24, 0x0f	; 15
  70:	24 e0       	ldi	r18, 0x04	; 4
  72:	95 95       	asr	r25
  74:	87 95       	ror	r24
  76:	2a 95       	dec	r18
  78:	e1 f7       	brne	.-8      	; 0x72 <USART_init+0x6>
  7a:	0e 94 4f 00 	call	0x9e	; 0x9e <__divmodhi4>
  7e:	61 50       	subi	r22, 0x01	; 1
  80:	71 09       	sbc	r23, r1
	UBRRH = (unsigned char)(ubrr>>8);
  82:	70 bd       	out	0x20, r23	; 32
	UBRRL = (unsigned char)(ubrr);
  84:	69 b9       	out	0x09, r22	; 9
	
/*Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
  86:	88 e1       	ldi	r24, 0x18	; 24
  88:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: 8data, 1stop bit */
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
  8e:	08 95       	ret

00000090 <main>:
#define BAUD 19200

int main(void) {
	

	USART_init(FOSC,BAUD);
  90:	60 e0       	ldi	r22, 0x00	; 0
  92:	7b e4       	ldi	r23, 0x4B	; 75
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	92 e4       	ldi	r25, 0x42	; 66
  98:	0e 94 36 00 	call	0x6c	; 0x6c <USART_init>
  // ------ Event loop ------ //
  while (1) {

    // do nothing
    
  }                                                  /* End event loop */
  9c:	ff cf       	rjmp	.-2      	; 0x9c <main+0xc>

0000009e <__divmodhi4>:
  9e:	97 fb       	bst	r25, 7
  a0:	07 2e       	mov	r0, r23
  a2:	16 f4       	brtc	.+4      	; 0xa8 <__divmodhi4+0xa>
  a4:	00 94       	com	r0
  a6:	07 d0       	rcall	.+14     	; 0xb6 <__divmodhi4_neg1>
  a8:	77 fd       	sbrc	r23, 7
  aa:	09 d0       	rcall	.+18     	; 0xbe <__divmodhi4_neg2>
  ac:	0e 94 63 00 	call	0xc6	; 0xc6 <__udivmodhi4>
  b0:	07 fc       	sbrc	r0, 7
  b2:	05 d0       	rcall	.+10     	; 0xbe <__divmodhi4_neg2>
  b4:	3e f4       	brtc	.+14     	; 0xc4 <__divmodhi4_exit>

000000b6 <__divmodhi4_neg1>:
  b6:	90 95       	com	r25
  b8:	81 95       	neg	r24
  ba:	9f 4f       	sbci	r25, 0xFF	; 255
  bc:	08 95       	ret

000000be <__divmodhi4_neg2>:
  be:	70 95       	com	r23
  c0:	61 95       	neg	r22
  c2:	7f 4f       	sbci	r23, 0xFF	; 255

000000c4 <__divmodhi4_exit>:
  c4:	08 95       	ret

000000c6 <__udivmodhi4>:
  c6:	aa 1b       	sub	r26, r26
  c8:	bb 1b       	sub	r27, r27
  ca:	51 e1       	ldi	r21, 0x11	; 17
  cc:	07 c0       	rjmp	.+14     	; 0xdc <__udivmodhi4_ep>

000000ce <__udivmodhi4_loop>:
  ce:	aa 1f       	adc	r26, r26
  d0:	bb 1f       	adc	r27, r27
  d2:	a6 17       	cp	r26, r22
  d4:	b7 07       	cpc	r27, r23
  d6:	10 f0       	brcs	.+4      	; 0xdc <__udivmodhi4_ep>
  d8:	a6 1b       	sub	r26, r22
  da:	b7 0b       	sbc	r27, r23

000000dc <__udivmodhi4_ep>:
  dc:	88 1f       	adc	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	5a 95       	dec	r21
  e2:	a9 f7       	brne	.-22     	; 0xce <__udivmodhi4_loop>
  e4:	80 95       	com	r24
  e6:	90 95       	com	r25
  e8:	bc 01       	movw	r22, r24
  ea:	cd 01       	movw	r24, r26
  ec:	08 95       	ret

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
